/* src/svelte/svelte.component.html generated by Svelte v1.40.2 */
import { showFrameworkObservable, getBorder } from 'common/colored-border.js';

function data() {
	return {
		frameworkInspector: false,
		border: getBorder('svelte'),
	};
};

function oncreate() {
	this.subscription = showFrameworkObservable.subscribe(
		newValue => this.set({frameworkInspector: newValue})
	);
};

function ondestroy() {
	this.subscription.dispose();
};

function create_main_fragment(state, component) {
	var text, if_block_1_anchor;

	var if_block = (state.frameworkInspector) && create_if_block(state, component);

	var if_block_1 = (!state.frameworkInspector) && create_if_block_1(state, component);

	return {
		c: function create() {
			if (if_block) if_block.c();
			text = createText("\n\n");
			if (if_block_1) if_block_1.c();
			if_block_1_anchor = createComment();
		},

		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insertNode(text, target, anchor);
			if (if_block_1) if_block_1.m(target, anchor);
			insertNode(if_block_1_anchor, target, anchor);
		},

		p: function update(changed, state) {
			if (state.frameworkInspector) {
				if (if_block) {
					if_block.p(changed, state);
				} else {
					if_block = create_if_block(state, component);
					if_block.c();
					if_block.m(text.parentNode, text);
				}
			} else if (if_block) {
				if_block.u();
				if_block.d();
				if_block = null;
			}

			if (!state.frameworkInspector) {
				if (if_block_1) {
					if_block_1.p(changed, state);
				} else {
					if_block_1 = create_if_block_1(state, component);
					if_block_1.c();
					if_block_1.m(if_block_1_anchor.parentNode, if_block_1_anchor);
				}
			} else if (if_block_1) {
				if_block_1.u();
				if_block_1.d();
				if_block_1 = null;
			}
		},

		u: function unmount() {
			if (if_block) if_block.u();
			detachNode(text);
			if (if_block_1) if_block_1.u();
			detachNode(if_block_1_anchor);
		},

		d: function destroy() {
			if (if_block) if_block.d();
			if (if_block_1) if_block_1.d();
		}
	};
}

// (1:0) {{#if frameworkInspector}}
function create_if_block(state, component) {
	var div, span, text_1, h1, text_2, text_3, text_4;

	return {
		c: function create() {
			div = createElement("div");
			span = createElement("span");
			span.textContent = "(Built with Svelte)";
			text_1 = createText("\n\t");
			h1 = createElement("h1");
			text_2 = createText("Hello ");
			text_3 = createText(state.world);
			text_4 = createText("!");
			this.h();
		},

		h: function hydrate() {
			setStyle(div, "border", state.border);
		},

		m: function mount(target, anchor) {
			insertNode(div, target, anchor);
			appendNode(span, div);
			appendNode(text_1, div);
			appendNode(h1, div);
			appendNode(text_2, h1);
			appendNode(text_3, h1);
			appendNode(text_4, h1);
		},

		p: function update(changed, state) {
			if (changed.border) {
				setStyle(div, "border", state.border);
			}

			if (changed.world) {
				text_3.data = state.world;
			}
		},

		u: function unmount() {
			detachNode(div);
		},

		d: noop
	};
}

// (8:0) {{#if !frameworkInspector}}
function create_if_block_1(state, component) {
	var h1, text, text_1, text_2;

	return {
		c: function create() {
			h1 = createElement("h1");
			text = createText("Hello ");
			text_1 = createText(state.world);
			text_2 = createText("!");
		},

		m: function mount(target, anchor) {
			insertNode(h1, target, anchor);
			appendNode(text, h1);
			appendNode(text_1, h1);
			appendNode(text_2, h1);
		},

		p: function update(changed, state) {
			if (changed.world) {
				text_1.data = state.world;
			}
		},

		u: function unmount() {
			detachNode(h1);
		},

		d: noop
	};
}

function Svelte(options) {
	init(this, options);
	this._state = assign(data(), options.data);

	this._handlers.destroy = [ondestroy]

	var _oncreate = oncreate.bind(this);

	if (!options._root) {
		this._oncreate = [_oncreate];
	} else {
	 	this._root._oncreate.push(_oncreate);
	 }

	this._fragment = create_main_fragment(this._state, this);

	if (options.target) {
		this._fragment.c();
		this._fragment.m(options.target, options.anchor || null);

		callAll(this._oncreate);
	}
}

assign(Svelte.prototype, {
 	destroy: destroy,
 	get: get,
 	fire: fire,
 	observe: observe,
 	on: on,
 	set: set,
 	teardown: destroy,
 	_set: _set,
 	_mount: _mount,
 	_unmount: _unmount
 });

Svelte.prototype._recompute = noop;

function createText(data) {
	return document.createTextNode(data);
}

function createComment() {
	return document.createComment('');
}

function insertNode(node, target, anchor) {
	target.insertBefore(node, anchor);
}

function detachNode(node) {
	node.parentNode.removeChild(node);
}

function createElement(name) {
	return document.createElement(name);
}

function setStyle(node, key, value) {
	node.style.setProperty(key, value);
}

function appendNode(node, target) {
	target.appendChild(node);
}

function noop() {}

function init(component, options) {
	component.options = options;

	component._observers = { pre: blankObject(), post: blankObject() };
	component._handlers = blankObject();
	component._root = options._root || component;
	component._yield = options._yield;
	component._bind = options._bind;
}

function assign(target) {
	var k,
		source,
		i = 1,
		len = arguments.length;
	for (; i < len; i++) {
		source = arguments[i];
		for (k in source) target[k] = source[k];
	}

	return target;
}

function callAll(fns) {
	while (fns && fns.length) fns.pop()();
}

function destroy(detach) {
	this.destroy = noop;
	this.fire('destroy');
	this.set = this.get = noop;

	if (detach !== false) this._fragment.u();
	this._fragment.d();
	this._fragment = this._state = null;
}

function get(key) {
	return key ? this._state[key] : this._state;
}

function fire(eventName, data) {
	var handlers =
		eventName in this._handlers && this._handlers[eventName].slice();
	if (!handlers) return;

	for (var i = 0; i < handlers.length; i += 1) {
		handlers[i].call(this, data);
	}
}

function observe(key, callback, options) {
	var group = options && options.defer
		? this._observers.post
		: this._observers.pre;

	(group[key] || (group[key] = [])).push(callback);

	if (!options || options.init !== false) {
		callback.__calling = true;
		callback.call(this, this._state[key]);
		callback.__calling = false;
	}

	return {
		cancel: function() {
			var index = group[key].indexOf(callback);
			if (~index) group[key].splice(index, 1);
		}
	};
}

function on(eventName, handler) {
	if (eventName === 'teardown') return this.on('destroy', handler);

	var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
	handlers.push(handler);

	return {
		cancel: function() {
			var index = handlers.indexOf(handler);
			if (~index) handlers.splice(index, 1);
		}
	};
}

function set(newState) {
	this._set(assign({}, newState));
	if (this._root._lock) return;
	this._root._lock = true;
	callAll(this._root._beforecreate);
	callAll(this._root._oncreate);
	callAll(this._root._aftercreate);
	this._root._lock = false;
}

function _set(newState) {
	var oldState = this._state,
		changed = {},
		dirty = false;

	for (var key in newState) {
		if (differs(newState[key], oldState[key])) changed[key] = dirty = true;
	}
	if (!dirty) return;

	this._state = assign({}, oldState, newState);
	this._recompute(changed, this._state);
	if (this._bind) this._bind(changed, this._state);
	dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
	this._fragment.p(changed, this._state);
	dispatchObservers(this, this._observers.post, changed, this._state, oldState);
}

function _mount(target, anchor) {
	this._fragment.m(target, anchor);
}

function _unmount() {
	this._fragment.u();
}

function blankObject() {
	return Object.create(null);
}

function differs(a, b) {
	return a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}

function dispatchObservers(component, group, changed, newState, oldState) {
	for (var key in group) {
		if (!changed[key]) continue;

		var newValue = newState[key];
		var oldValue = oldState[key];

		var callbacks = group[key];
		if (!callbacks) continue;

		for (var i = 0; i < callbacks.length; i += 1) {
			var callback = callbacks[i];
			if (callback.__calling) continue;

			callback.__calling = true;
			callback.call(component, newValue, oldValue);
			callback.__calling = false;
		}
	}
}
export default Svelte;